// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(gulp) {
    var axis, bowerFiles, browserSync, browserify, del, directory, downbeat, exists, folder, grid, jade, map, marked, moment, path, plugins, reload, rsync, runSequence, rupture, server, through, _;
    plugins = (require('gulp-load-plugins'))();
    runSequence = (require('run-sequence')).use(gulp);
    browserSync = require('browser-sync');
    reload = browserSync.reload;
    bowerFiles = require('main-bower-files');
    exists = (require('fs')).existsSync;
    browserify = require('browserify');
    through = (require('through2')).obj;
    rsync = (require('rsyncwrapper')).rsync;
    axis = require('axis');
    rupture = require('rupture');
    grid = require('happy-grid');
    downbeat = require('downbeat');
    moment = require('moment');
    del = require('del');
    jade = require('jade');
    _ = require('lodash');
    folder = (require('path')).dirname;
    marked = require('marked');
    marked.setOptions({
      smartypants: true,
      breaks: true
    });
    map = require('./map');
    server = 'projects:/var/www/sitelightning.co';
    path = {
      stylus: 'source/styles/**/*.styl',
      mainStylus: 'source/styles/main.styl',
      coffee: 'source/scripts/**/*.coffee',
      content: 'source/content/**/*.{jade,md}',
      markdown: 'source/content/**/*.md',
      jade: 'source/content/**/*.jade',
      allContent: 'source/{content,templates}/**/*',
      images: 'source/images',
      fonts: 'source/fonts',
      development: './development',
      production: './production'
    };
    directory = 'source/content';
    gulp.task('map', function(done) {
      return map(done);
    });
    gulp.task('markdown', function() {
      var site;
      site = require("" + (process.cwd()) + "/site.json");
      return gulp.src(path.markdown).pipe(plugins.plumber()).pipe(plugins.frontMatter({
        property: 'data'
      })).pipe(plugins.markdown({
        smartypants: true,
        breaks: true
      })).pipe(plugins.data(function(file) {
        var data, date;
        date = new Date(file.data.date);
        if (file.data.date) {
          file.data.datetime = moment(date).format();
          file.data.date = moment(date).format('MMMM Do, YYYY');
        }
        file.data.layout = "./source/templates/" + file.data.layout + ".jade";
        file.data.pretty = true;
        file.data.url = file.path.slice((file.path.indexOf(directory)) + directory.length).replace(/(index)?(\.jade$|\.md$|\.html$)/, '');
        if (file.data.url.slice(-1) !== '/') {
          file.data.url += '/';
        }
        file.data.collection = (folder(file.data.url)) + '/';
        file.data._ = require('lodash');
        file.data.moment = require('moment');
        return data = _.extend({}, site, file.data);
      })).pipe(plugins.layout(function(file) {
        return file.data;
      })).pipe(plugins.prettyUrl()).pipe(gulp.dest(path.development));
    });
    gulp.task('jade', function() {
      var site;
      site = require("" + (process.cwd()) + "/site.json");
      return gulp.src(path.jade).pipe(plugins.plumber()).pipe(plugins.frontMatter({
        property: 'data'
      })).pipe(plugins.data(function(file) {
        var data, date;
        date = new Date(file.data.date);
        if (file.data.date) {
          file.data.datetime = moment(date).format();
          file.data.date = moment(date).format('MMMM Do, YYYY');
        }
        file.data.url = (file.path.slice((file.path.indexOf(directory)) + directory.length)).replace(/(index)?(\.jade$|\.md$|\.html$)/, '');
        if (file.data.url.slice(-1) !== '/') {
          file.data.url += '/';
        }
        file.data.collection = folder(file.data.url);
        if (!file.data.url.slice(-1 === '/')) {
          file.data.url = "" + file.data.url + "/";
        }
        file.data._ = require('lodash');
        file.data.moment = require('moment');
        return data = _.extend({}, site, file.data);
      })).pipe(plugins.jade({
        pretty: true
      })).pipe(plugins.prettyUrl()).pipe(gulp.dest(path.development));
    });
    gulp.task('stylus', function() {
      return gulp.src(path.mainStylus).pipe(plugins.plumber()).pipe(plugins.sourcemaps.init()).pipe(plugins.stylus({
        use: [
          rupture({
            implicit: false
          }), axis({
            implicit: false
          }), grid(), downbeat()
        ]
      })).pipe(plugins.autoprefixer({
        browsers: ['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1', 'Explorer >= 9']
      })).pipe(plugins.sourcemaps.write()).pipe(gulp.dest(path.development)).pipe(reload({
        stream: true
      }));
    });
    gulp.task('coffee', function() {
      return gulp.src(path.coffee).pipe(plugins.plumber()).pipe(plugins.sourcemaps.init()).pipe(plugins.coffee()).on('error', plugins.util.log).pipe(plugins.sourcemaps.write()).pipe(gulp.dest(path.development));
    });
    gulp.task('js', ['coffee', 'bower'], function() {
      return gulp.src("" + path.development + "/main.js").pipe(plugins.plumber()).pipe(through(function(file, enc, next) {
        return (browserify(file.path)).bundle(function(err, res) {
          file.contents = res;
          return next(null, file);
        });
      })).pipe(gulp.dest(path.development));
    });
    gulp.task('installBower', function() {
      return gulp.src('bower.json').pipe(plugins.install());
    });
    gulp.task('bower', ['installBower'], function() {
      if (exists('./bower_components')) {
        return gulp.src(bowerFiles()).pipe(gulp.dest("" + path.development + "/lib"));
      }
    });
    gulp.task('compile', ['bower', 'js', 'jade', 'markdown', 'stylus']);
    gulp.task('optimize', function() {
      var assets;
      assets = plugins.useref.assets({
        searchPath: path.development
      });
      return gulp.src("" + path.development + "/**/*.html").pipe(assets).pipe(plugins["if"]('*.css', plugins.csso())).pipe(plugins["if"]('*.js', plugins.uglify())).pipe(gulp.dest(path.production)).pipe(assets.restore()).pipe(plugins.useref()).pipe(plugins["if"]('*.html', plugins.minifyHtml())).pipe(gulp.dest(path.production));
    });
    gulp.task('cacheref', function() {
      var bust;
      bust = new plugins.cachebust();
      gulp.src("" + path.production + "/**/*.css").pipe(bust.resources()).pipe(gulp.dest(path.production));
      gulp.src("" + path.production + "/**/*.js").pipe(bust.resources()).pipe(gulp.dest(path.production));
      return gulp.src("" + path.production + "/**/*.html").pipe(bust.references()).pipe(gulp.dest(path.production));
    });
    gulp.task('cachebust', ['cacheref'], function(done) {
      return del(["" + path.production + "/script.min.js", "" + path.production + "/style.min.css"], done());
    });
    gulp.task('images', function() {
      return gulp.src("" + path.images + "/*").pipe(plugins.plumber()).pipe(plugins.cache(plugins.imagemin({
        progressive: true,
        interlaced: true
      }))).pipe(gulp.dest("production/images"));
    });
    gulp.task('move', function() {
      return gulp.src(['source/fonts/**/*', 'source/robots.txt']).pipe(gulp.dest("" + path.production));
    });
    gulp.task('clear', function(done) {
      return plugins.cache.clearAll(done);
    });
    gulp.task('clean', ['clear'], function(done) {
      return del([path.development, path.production, './bower_components', 'site.json'], done());
    });
    gulp.task('browser', function() {
      browserSync.init({
        notify: false,
        server: {
          baseDir: [path.development, './source']
        }
      });
      gulp.watch(path.allContent, ['jade', 'markdown', reload]);
      gulp.watch(path.stylus, ['stylus']);
      gulp.watch(path.coffee, ['js', reload]);
      return gulp.watch(path.images, reload);
    });
    gulp.task('previewBrowser', function() {
      return browserSync({
        server: {
          baseDir: path.production
        }
      });
    });
    gulp.task('rsync', function(done) {
      return rsync({
        ssh: true,
        src: "" + path.production + "/",
        dest: server,
        recursive: true,
        syncDest: true,
        args: ['--verbose']
      }, function(erro, stdout, stderr, cmd) {
        plugins.util.log(stdout);
        return done();
      });
    });
    gulp.task('develop', function(done) {
      return runSequence('map', 'compile', 'browser', done);
    });
    gulp.task('default', ['develop']);
    gulp.task('build', function(done) {
      return runSequence('clean', 'map', 'compile', ['optimize', 'move', 'images'], 'cachebust', done);
    });
    gulp.task('preview', function(done) {
      return runSequence('build', 'previewBrowser', done);
    });
    return gulp.task('deploy', ['build'], function(done) {
      return runSequence('rsync', done);
    });
  };

}).call(this);
