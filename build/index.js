// Generated by CoffeeScript 1.7.1
(function() {
  module.exports = function(gulp, options) {
    var axis, bowerFiles, browserSync, browserify, bust, config, del, dirname, downbeat, exists, grid, jade, lib, map, marked, moment, plugins, reload, rsync, runSequence, rupture, stylus, through, typography, yaml, _;
    plugins = (require('gulp-load-plugins'))();
    runSequence = (require('run-sequence')).use(gulp);
    browserSync = require('browser-sync');
    reload = browserSync.reload;
    bowerFiles = require('main-bower-files');
    exists = (require('fs')).existsSync;
    browserify = require('browserify');
    through = (require('through2')).obj;
    rsync = (require('rsyncwrapper')).rsync;
    axis = require('axis');
    rupture = require('rupture');
    grid = require('happy-grid');
    downbeat = require('downbeat');
    lib = require('stylus-lightning');
    moment = require('moment');
    del = require('del');
    jade = require('jade');
    _ = require('lodash');
    typography = require('typogr');
    dirname = require('path').dirname;
    yaml = require('yamljs');
    marked = require('marked');
    marked.setOptions({
      smartypants: true,
      breaks: true
    });
    stylus = require('stylus');
    jade.filters.stylus = stylus.render;
    map = require('./map');
    config = {
      server: '',
      source: 'source',
      development: 'development',
      production: 'production',
      assets: {
        styles: 'source/styles',
        scripts: 'source/scripts',
        content: 'source/content',
        templates: 'source/templates',
        images: 'source/images',
        fonts: 'source/fonts',
        email: 'source/email'
      }
    };
    gulp.task('map', function(done) {
      return map(config, done);
    });
    gulp.task('jade', function() {
      var site;
      site = require("" + (process.cwd()) + "/site.json");
      return gulp.src(["" + config.assets.content + "/**/*.jade", "!" + config.assets.content + "/_includes/**/*"]).pipe(plugins.plumber()).pipe(plugins.frontMatter({
        property: 'data'
      })).pipe(plugins.data(function(file) {
        var data, date, meta, _i, _len, _ref;
        date = new Date(file.data.date);
        if (file.data.date) {
          file.data.datetime = moment(date).format();
          file.data.date = moment(date).format('MMMM Do, YYYY');
        }
        file.data.url = (file.path.slice((file.path.indexOf(config.assets.content)) + config.assets.content.length)).replace(/\/?(index)?(\.jade$|\.md$|\.html$)/, '/');
        file.data.collection = dirname(file.data.url);
        _ref = ['title', 'description', 'og_title', 'og_description', 'twitter_title', 'twitter_description'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          meta = _ref[_i];
          if (file.data[meta]) {
            file.data[meta] = typography(file.data[meta]).chain().smartypants().value();
          }
        }
        file.data._ = require('lodash');
        return data = _.extend({}, site, file.data);
      })).pipe(plugins.jade({
        pretty: true
      })).pipe(plugins.prettyUrl()).pipe(gulp.dest(config.development));
    });
    gulp.task('markdown', function() {
      var site;
      site = require("" + (process.cwd()) + "/site.json");
      return gulp.src(["" + config.assets.content + "/**/*.md", "!" + config.assets.content + "/_includes/**/*"]).pipe(plugins.plumber()).pipe(plugins.frontMatter({
        property: 'data'
      })).pipe(plugins.markdown({
        smartypants: true,
        breaks: true
      })).pipe(plugins.data(function(file) {
        var data, date, meta, _i, _len, _ref;
        date = new Date(file.data.date);
        if (file.data.date) {
          file.data.datetime = moment(date).format();
          file.data.date = moment(date).format('MMMM Do, YYYY');
        }
        file.data.layout = "" + config.assets.templates + "/" + file.data.layout + ".jade";
        file.data.pretty = true;
        file.data.url = (file.path.slice((file.path.indexOf(config.assets.content)) + config.assets.content.length)).replace(/\/?(index)?(\.jade$|\.md$|\.html$)/, '/');
        file.data.collection = (dirname(file.data.url)) + '/';
        _ref = ['title', 'description', 'og_title', 'og_description', 'twitter_title', 'twitter_description'];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          meta = _ref[_i];
          if (file.data[meta]) {
            file.data[meta] = typography(file.data[meta]).chain().smartypants().value();
          }
        }
        file.data._ = require('lodash');
        file.data.typography = (require('typogr')).typogrify;
        return data = _.extend({}, site, file.data);
      })).pipe(plugins.layout(function(file) {
        return file.data;
      })).pipe(plugins.prettyUrl()).pipe(gulp.dest(config.development));
    });
    gulp.task('feed', function() {
      var site;
      site = require("" + (process.cwd()) + "/site.json");
      return gulp.src("" + config.assets.templates + "/feed.jade").pipe(plugins.jade({
        locals: site,
        jade: jade
      })).pipe(plugins.rename('feed.xml')).pipe(gulp.dest(config.development));
    });
    gulp.task('stylus', function() {
      return gulp.src("" + config.assets.styles + "/main.styl").pipe(plugins.plumber()).pipe(plugins.sourcemaps.init()).pipe(plugins.stylus({
        use: [
          rupture({
            implicit: false
          }), axis({
            implicit: false
          }), lib(), grid(), downbeat()
        ]
      })).pipe(plugins.autoprefixer({
        browsers: ['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1', 'Explorer >= 9']
      })).pipe(plugins.sourcemaps.write()).pipe(gulp.dest(config.development)).pipe(reload({
        stream: true
      }));
    });
    gulp.task('coffee', function() {
      return gulp.src("" + config.assets.scripts + "/**/*.coffee").pipe(plugins.plumber()).pipe(plugins.sourcemaps.init()).pipe(plugins.coffee()).on('error', plugins.util.log).pipe(plugins.sourcemaps.write()).pipe(gulp.dest(config.development));
    });
    gulp.task('js', ['coffee', 'bower'], function() {
      return gulp.src("" + config.development + "/main.js").pipe(plugins.plumber()).pipe(through(function(file, enc, next) {
        return (browserify(file.path)).bundle(function(err, res) {
          file.contents = res;
          return next(null, file);
        });
      })).pipe(gulp.dest(config.development));
    });
    gulp.task('installBower', function() {
      return gulp.src('bower.json').pipe(plugins.install());
    });
    gulp.task('bower', ['installBower'], function() {
      if (exists('./bower_components')) {
        return gulp.src(bowerFiles()).pipe(gulp.dest("" + config.development + "/lib"));
      }
    });
    gulp.task('compile', ['js', 'jade', 'feed', 'markdown', 'stylus']);
    gulp.task('optimize', function() {
      var assets;
      assets = plugins.useref.assets({
        searchPath: config.development
      });
      return gulp.src("" + config.development + "/**/*.html").pipe(assets).pipe(plugins["if"]('*.css', plugins.csso())).pipe(plugins["if"]('*.js', plugins.uglify())).pipe(gulp.dest(config.production)).pipe(assets.restore()).pipe(plugins.useref()).pipe(plugins["if"]('*.html', plugins.minifyHtml())).pipe(gulp.dest(config.production));
    });
    bust = new plugins.cachebust();
    gulp.task('cacheresources', function() {
      gulp.src("" + config.production + "/**/*.css").pipe(bust.resources()).pipe(gulp.dest(config.production));
      return gulp.src("" + config.production + "/**/*.js").pipe(bust.resources()).pipe(gulp.dest(config.production));
    });
    gulp.task('cacheref', ['cacheresources'], function() {
      return gulp.src("" + config.production + "/**/*.html").pipe(bust.references()).pipe(gulp.dest(config.production));
    });
    gulp.task('cachebust', ['cacheref'], function(done) {
      return del(["" + config.production + "/script.min.js", "" + config.production + "/style.min.css"], done());
    });
    gulp.task('images', function() {
      return gulp.src("" + config.assets.images + "/*").pipe(plugins.plumber()).pipe(plugins.cache(plugins.imagemin({
        progressive: true,
        interlaced: true
      }))).pipe(gulp.dest("" + config.production + "/images"));
    });
    gulp.task('move', function() {
      return gulp.src(["" + config.assets.fonts + "/**/*", "" + config.development + "/feed.xml", "" + config.source + "/robots.txt", "" + config.source + "/.redirects.conf", "!" + config.source + "/**/.keep"], {
        dot: true
      }).pipe(gulp.dest(config.production));
    });
    gulp.task('clear', function(done) {
      return plugins.cache.clearAll(done);
    });
    gulp.task('clean', ['clear'], function(done) {
      return del([config.development, config.production, "" + config.assets.email + "/build", './bower_components', 'site.json'], done());
    });
    gulp.task('browser', function() {
      browserSync.init({
        notify: false,
        server: {
          baseDir: [config.development, config.source]
        }
      });
      gulp.watch("{" + config.assets.content + "," + config.assets.templates + "}/**/*", ['jade', 'markdown', reload]);
      gulp.watch("" + config.assets.styles + "/**/*", ['stylus']);
      gulp.watch("" + config.assets.scripts + "/**/*", ['js', reload]);
      return gulp.watch("" + config.assets.images + "/**/*", reload);
    });
    gulp.task('previewBrowser', function() {
      return browserSync({
        server: {
          baseDir: config.production
        }
      });
    });
    gulp.task('rsync', function(done) {
      return rsync({
        ssh: true,
        src: "" + config.production + "/",
        dest: options.server,
        recursive: true,
        syncDest: true,
        args: ['--verbose']
      }, function(erro, stdout, stderr, cmd) {
        plugins.util.log(stdout);
        return done();
      });
    });
    gulp.task('email:jade', ['map'], function() {
      var site;
      site = require("" + (process.cwd()) + "/site.json");
      return gulp.src("" + config.assets.email + "/templates/*.jade").pipe(plugins.plumber()).pipe(plugins.jade({
        jade: jade,
        pretty: true,
        locals: site
      })).pipe(plugins.inlineCss({
        preserveMediaQueries: true,
        applyLinkTags: false,
        removeLinkTags: false
      })).pipe(gulp.dest("" + config.assets.email + "/build"));
    });
    gulp.task('email:text', ['email:jade'], function() {
      return gulp.src("" + config.assets.email + "/build/*.html").pipe(plugins.html2txt()).pipe(gulp.dest("" + config.assets.email + "/build"));
    });
    gulp.task('email:images', function() {
      return gulp.src("" + config.assets.email + "/images/*").pipe(gulp.dest("" + config.assets.email + "/build/images"));
    });
    gulp.task('email:browser', function() {
      browserSync.init({
        notify: false,
        server: {
          baseDir: "" + config.assets.email + "/build"
        }
      });
      gulp.watch(["" + config.assets.email + "/styles/**/*", "" + config.assets.email + "/templates/**/*"], ['email:reload']);
      return gulp.watch("" + config.assets.email + "/images/*", reload);
    });
    gulp.task('email:reload', ['email:text'], function() {
      return reload();
    });
    gulp.task('email', ['email:text', 'email:images', 'email:browser']);
    gulp.task('develop', function(done) {
      return runSequence('map', 'compile', 'browser', done);
    });
    gulp.task('default', ['develop']);
    gulp.task('build', function(done) {
      return runSequence('clean', 'map', 'compile', ['optimize', 'move', 'images'], 'cachebust', done);
    });
    gulp.task('preview', function(done) {
      return runSequence('build', 'previewBrowser', done);
    });
    return gulp.task('deploy', ['build'], function(done) {
      return runSequence('rsync', done);
    });
  };

}).call(this);
