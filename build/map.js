// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, directories, frontMatter, fs, glob, map, markdown, moment, page, path, typography, yaml, _, _i, _j, _len, _len1, _ref, _ref1;

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  directories = (require('node-dir')).subdirs;

  glob = require('globby');

  yaml = require('yamljs');

  moment = require('moment');

  cheerio = require('cheerio');

  typography = require('typogr');

  frontMatter = require('front-matter');

  markdown = require('marked');

  markdown.setOptions({
    smartypants: true
  });

  map = {
    site: {
      name: '',
      url: '',
      title: '',
      description: ''
    },
    pages: {},
    collections: {}
  };

  _.extend(map, yaml.load('./site.yml'));

  map.site.name = typography(map.site.name).chain().smartypants().value();

  if (map.header) {
    _ref = map.header;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      page = _ref[_i];
      page.title = typography(page.title).chain().smartypants().value();
    }
  }

  if (map.footer) {
    _ref1 = map.footer;
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      page = _ref1[_j];
      page.title = typography(page.title).chain().smartypants().value();
    }
  }

  module.exports = function(config, done) {
    var createMap, getCollections, sortCollectionPages, writeJSON;
    getCollections = function(cb) {
      return directories("./" + config.assets.content, function(err, collections) {
        var collection, url, _k, _len2;
        for (_k = 0, _len2 = collections.length; _k < _len2; _k++) {
          collection = collections[_k];
          url = ("" + collection + "/").replace(config.assets.content, '');
          if (url !== '/_includes/') {
            map.collections[url] = {
              url: url,
              pages: []
            };
          }
        }
        return cb();
      });
    };
    createMap = function(cb) {
      return glob(["./" + config.assets.content + "/**/*", "!./" + config.assets.content + "/_includes/**/*"], {
        nodir: true
      }, function(err, files) {
        var $, collection, content, data, file, image, intro, meta, post, _k, _len2;
        if (err) {
          console.error;
        }
        for (_k = 0, _len2 = files.length; _k < _len2; _k++) {
          file = files[_k];
          data = fs.readFileSync(file, 'utf8');
          content = frontMatter(data);
          meta = content.attributes;
          post = '';
          page = {};
          page.url = file.slice((file.indexOf(config.assets.content)) + config.assets.content.length).replace(/(index)?(\.jade$|.\md$)/, '');
          if (meta.title) {
            page.title = typography(meta.title).chain().smartypants().value();
          }
          if (meta.description) {
            page.description = typography(meta.description).chain().smartypants().value();
          }
          if (meta.tags) {
            page.tags = meta.tags;
          }
          if (meta.date) {
            page.datetime = moment(new Date(meta.date)).format();
            page.date = moment(new Date(meta.date)).format('MMMM Do, YYYY');
          }
          if ((path.extname(file)) === '.md') {
            post = markdown(content.body);
            page.post = post;
            $ = cheerio.load(post);
            if (meta.intro) {
              page.intro = meta.intro;
            } else {
              intro = $('p').first().html();
              if (intro) {
                page.intro = intro;
              }
            }
            if (meta.image) {
              page.image = content.attributes.image;
            } else {
              image = $('img').attr('src');
              if (image) {
                page.image = image;
              }
            }
          } else {
            if (meta.intro) {
              page.intro = meta.intro;
            }
            if (meta.image) {
              page.image = content.attributes.image;
            }
          }
          if (page.url === '/') {
            map.site.title = page.title;
            map.site.description = page.description;
          } else if ((page.url.match(/\//g)).length < 2) {
            page.url += '/';
            map.pages[page.url] = page;
          } else if (page.url.match(/\/$/)) {
            _.extend(map.collections[page.url], page);
          } else {
            collection = (path.dirname(page.url)) + '/';
            page.url += '/';
            map.collections[collection].pages.push(page);
          }
        }
        return cb();
      });
    };
    sortCollectionPages = function(done) {
      var collection, key, _ref2;
      _ref2 = map.collections;
      for (key in _ref2) {
        collection = _ref2[key];
        collection.pages.sort(function(a, b) {
          return new Date(b.datetime) - new Date(a.datetime);
        });
      }
      return done();
    };
    writeJSON = function(done) {
      fs.writeFileSync('./site.json', JSON.stringify(map));
      return done();
    };
    return getCollections(function() {
      return createMap(function() {
        return sortCollectionPages(function() {
          return writeJSON(function() {
            return done();
          });
        });
      });
    });
  };

}).call(this);
