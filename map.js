// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, createMap, directories, directory, frontMatter, fs, getCollections, glob, map, markdown, moment, path, sortCollectionPages, writeJSON, yaml, _;

  fs = require('fs');

  path = require('path');

  _ = require('lodash');

  directories = (require('node-dir')).subdirs;

  glob = require('glob');

  yaml = require('yamljs');

  moment = require('moment');

  cheerio = require('cheerio');

  frontMatter = require('front-matter');

  markdown = require('marked');

  markdown.setOptions({
    smartypants: true
  });

  directory = 'source/content';

  map = {
    site: {
      name: '',
      url: '',
      title: '',
      description: ''
    },
    pages: {},
    collections: {}
  };

  _.extend(map, yaml.load('./site.yml'));

  getCollections = function(done) {
    return directories("./" + directory, function(err, collections) {
      var collection, url, _i, _len;
      for (_i = 0, _len = collections.length; _i < _len; _i++) {
        collection = collections[_i];
        url = ("" + collection + "/").replace(directory, '');
        map.collections[url] = {
          url: url,
          pages: []
        };
      }
      return done();
    });
  };

  createMap = function(done) {
    return glob("./" + directory + "/**/*", {
      nodir: true
    }, function(err, files) {
      var $, collection, content, data, file, image, intro, meta, page, post, _i, _len;
      if (err) {
        console.error;
      }
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        file = files[_i];
        data = fs.readFileSync(file, 'utf8');
        content = frontMatter(data);
        meta = content.attributes;
        post = '';
        page = {};
        page.url = file.slice((file.indexOf(directory)) + directory.length).replace(/(index)?(\.jade$|.\md$)/, '');
        if (meta.title) {
          page.title = meta.title;
        }
        if (meta.description) {
          page.description = meta.description;
        }
        if (meta.tags) {
          page.tags = meta.tags;
        }
        if (meta.date) {
          page.datetime = moment(new Date(meta.date)).format();
          page.date = moment(new Date(meta.date)).format('MMMM Do, YYYY');
        }
        if ((path.extname(file)) === '.md') {
          post = markdown(content.body);
          $ = cheerio.load(post);
          if (meta.intro) {
            page.intro = meta.intro;
          } else {
            intro = $('p').first().html();
            if (intro) {
              page.intro = intro;
            }
          }
          if (meta.image) {
            page.image = content.attributes.image;
          } else {
            image = $('img').attr('src');
            if (image) {
              page.image = image;
            }
          }
        } else {
          if (meta.intro) {
            page.intro = meta.intro;
          }
          if (meta.image) {
            page.image = content.attributes.image;
          }
        }
        if (page.url === '/') {
          map.site.title = page.title;
          map.site.description = page.description;
        } else if ((page.url.match(/\//g)).length < 2) {
          page.url += '/';
          map.pages[page.url] = page;
        } else if (page.url.match(/\/$/)) {
          _.extend(map.collections[page.url], page);
        } else {
          collection = (path.dirname(page.url)) + '/';
          page.url += '/';
          map.collections[collection].pages.push(page);
        }
      }
      return done();
    });
  };

  sortCollectionPages = function(done) {
    var collection, key, _ref;
    _ref = map.collections;
    for (key in _ref) {
      collection = _ref[key];
      collection.pages.sort(function(a, b) {
        return new Date(b.datetime) - new Date(a.datetime);
      });
    }
    return done();
  };

  writeJSON = function(done) {
    fs.writeFileSync('./site.json', JSON.stringify(map));
    return done();
  };

  module.exports = function(done) {
    return getCollections(function() {
      return createMap(function() {
        return sortCollectionPages(function() {
          return writeJSON(function() {
            return done();
          });
        });
      });
    });
  };

}).call(this);
